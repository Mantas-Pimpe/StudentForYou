{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport all from 'react-prop-types/lib/all';\nimport SafeAnchor from './SafeAnchor';\nimport { bsClass, prefix, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport createChainedFunction from './utils/createChainedFunction';\nvar propTypes = {\n  /**\n   * Highlight the menu item as active.\n   */\n  active: React.PropTypes.bool,\n\n  /**\n   * Disable the menu item, making it unselectable.\n   */\n  disabled: React.PropTypes.bool,\n\n  /**\n   * Styles the menu item as a horizontal rule, providing visual separation between\n   * groups of menu items.\n   */\n  divider: all(React.PropTypes.bool, function (_ref) {\n    var divider = _ref.divider;\n    var children = _ref.children;\n    return divider && children ? new Error('Children will not be rendered for dividers') : null;\n  }),\n\n  /**\n   * Value passed to the `onSelect` handler, useful for identifying the selected menu item.\n   */\n  eventKey: React.PropTypes.any,\n\n  /**\n   * Styles the menu item as a header label, useful for describing a group of menu items.\n   */\n  header: React.PropTypes.bool,\n\n  /**\n   * HTML `href` attribute corresponding to `a.href`.\n   */\n  href: React.PropTypes.string,\n\n  /**\n   * Callback fired when the menu item is clicked.\n   */\n  onClick: React.PropTypes.func,\n\n  /**\n   * Callback fired when the menu item is selected.\n   *\n   * ```js\n   * (eventKey: any, event: Object) => any\n   * ```\n   */\n  onSelect: React.PropTypes.func\n};\nvar defaultProps = {\n  divider: false,\n  disabled: false,\n  header: false\n};\n\nvar MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  function MenuItem(props, context) {\n    _classCallCheck(this, MenuItem);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleClick = _this.handleClick.bind(_this);\n    return _this;\n  }\n\n  MenuItem.prototype.handleClick = function handleClick(event) {\n    var _props = this.props;\n    var href = _props.href;\n    var disabled = _props.disabled;\n    var onSelect = _props.onSelect;\n    var eventKey = _props.eventKey;\n\n    if (!href || disabled) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    if (onSelect) {\n      onSelect(eventKey, event);\n    }\n  };\n\n  MenuItem.prototype.render = function render() {\n    var _props2 = this.props;\n    var active = _props2.active;\n    var disabled = _props2.disabled;\n    var divider = _props2.divider;\n    var header = _props2.header;\n    var onClick = _props2.onClick;\n    var className = _props2.className;\n    var style = _props2.style;\n\n    var props = _objectWithoutProperties(_props2, ['active', 'disabled', 'divider', 'header', 'onClick', 'className', 'style']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['eventKey', 'onSelect']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1];\n\n    if (divider) {\n      // Forcibly blank out the children; separators shouldn't render any.\n      elementProps.children = undefined;\n      return React.createElement('li', _extends({}, elementProps, {\n        role: 'separator',\n        className: classNames(className, 'divider'),\n        style: style\n      }));\n    }\n\n    if (header) {\n      return React.createElement('li', _extends({}, elementProps, {\n        role: 'heading',\n        className: classNames(className, prefix(bsProps, 'header')),\n        style: style\n      }));\n    }\n\n    return React.createElement('li', {\n      role: 'presentation',\n      className: classNames(className, {\n        active: active,\n        disabled: disabled\n      }),\n      style: style\n    }, React.createElement(SafeAnchor, _extends({}, elementProps, {\n      role: 'menuitem',\n      tabIndex: '-1',\n      onClick: createChainedFunction(onClick, this.handleClick)\n    })));\n  };\n\n  return MenuItem;\n}(React.Component);\n\nMenuItem.propTypes = propTypes;\nMenuItem.defaultProps = defaultProps;\nexport default bsClass('dropdown', MenuItem);","map":null,"metadata":{},"sourceType":"module"}