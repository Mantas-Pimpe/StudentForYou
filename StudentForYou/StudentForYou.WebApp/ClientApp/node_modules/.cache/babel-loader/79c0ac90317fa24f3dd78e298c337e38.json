{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\manta\\\\source\\\\repos\\\\StudentForYou\\\\StudentForYou\\\\StudentForYou.WebApp\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\manta\\\\source\\\\repos\\\\StudentForYou\\\\StudentForYou\\\\StudentForYou.WebApp\\\\ClientApp\\\\src\\\\components\\\\api-authorization\\\\LoginMenu.js\";\nimport React, { Component, Fragment } from 'react';\nimport { NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport authService from './AuthorizeService';\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\nexport class LoginMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticated: false,\n      userName: null\n    };\n  }\n\n  componentDidMount() {\n    this._subscription = authService.subscribe(() => this.populateState());\n    this.populateState();\n  }\n\n  componentWillUnmount() {\n    authService.unsubscribe(this._subscription);\n  }\n\n  async populateState() {\n    const _ref = await Promise.all([authService.isAuthenticated(), authService.getUser()]),\n          _ref2 = _slicedToArray(_ref, 2),\n          isAuthenticated = _ref2[0],\n          user = _ref2[1];\n\n    this.setState({\n      isAuthenticated,\n      userName: user && user.name\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          isAuthenticated = _this$state.isAuthenticated,\n          userName = _this$state.userName;\n\n    if (!isAuthenticated) {\n      const registerPath = \"\".concat(ApplicationPaths.Register);\n      const loginPath = \"\".concat(ApplicationPaths.Login);\n      return this.anonymousView(registerPath, loginPath);\n    } else {\n      const profilePath = \"\".concat(ApplicationPaths.Profile);\n      const logoutPath = {\n        pathname: \"\".concat(ApplicationPaths.LogOut),\n        state: {\n          local: true\n        }\n      };\n      return this.authenticatedView(userName, profilePath, logoutPath);\n    }\n  }\n\n  authenticatedView(userName, profilePath, logoutPath) {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(NavItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      tag: Link,\n      className: \"text-dark\",\n      to: profilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Hello \", userName)), React.createElement(NavItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      tag: Link,\n      className: \"text-dark\",\n      to: logoutPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Logout\")));\n  }\n\n  anonymousView(registerPath, loginPath) {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(NavItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      tag: Link,\n      className: \"text-dark\",\n      to: registerPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Register\")), React.createElement(NavItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      tag: Link,\n      className: \"text-dark\",\n      to: loginPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Login\")));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\manta\\source\\repos\\StudentForYou\\StudentForYou\\StudentForYou.WebApp\\ClientApp\\src\\components\\api-authorization\\LoginMenu.js"],"names":["React","Component","Fragment","NavItem","NavLink","Link","authService","ApplicationPaths","LoginMenu","constructor","props","state","isAuthenticated","userName","componentDidMount","_subscription","subscribe","populateState","componentWillUnmount","unsubscribe","Promise","all","getUser","user","setState","name","render","registerPath","Register","loginPath","Login","anonymousView","profilePath","Profile","logoutPath","pathname","LogOut","local","authenticatedView"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport authService from './AuthorizeService';\r\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\nexport class LoginMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isAuthenticated: false,\r\n            userName: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.populateState());\r\n        this.populateState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    async populateState() {\r\n        const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()])\r\n        this.setState({\r\n            isAuthenticated,\r\n            userName: user && user.name\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isAuthenticated, userName } = this.state;\r\n        if (!isAuthenticated) {\r\n            const registerPath = `${ApplicationPaths.Register}`;\r\n            const loginPath = `${ApplicationPaths.Login}`;\r\n            return this.anonymousView(registerPath, loginPath);\r\n        } else {\r\n            const profilePath = `${ApplicationPaths.Profile}`;\r\n            const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\r\n            return this.authenticatedView(userName, profilePath, logoutPath);\r\n        }\r\n    }\r\n\r\n    authenticatedView(userName, profilePath, logoutPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={profilePath}>Hello {userName}</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={logoutPath}>Logout</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n\r\n    }\r\n\r\n    anonymousView(registerPath, loginPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={registerPath}>Register</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={loginPath}>Login</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}