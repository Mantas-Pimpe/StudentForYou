{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React, { PropTypes } from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\nimport { bsClass as setBsClass, prefix, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nvar propTypes = {\n  componentClass: elementType,\n\n  /**\n   * Sets a default animation strategy for all children `<TabPane>`s. Use\n   * `false` to disable, `true` to enable the default `<Fade>` animation or any\n   * `<Transition>` component.\n   */\n  animation: PropTypes.oneOfType([PropTypes.bool, elementType]),\n\n  /**\n   * Unmount tabs (remove it from the DOM) when they are no longer visible\n   */\n  unmountOnExit: PropTypes.bool\n};\nvar defaultProps = {\n  componentClass: 'div',\n  animation: true,\n  unmountOnExit: false\n};\nvar contextTypes = {\n  $bs_tabContainer: PropTypes.shape({\n    activeKey: PropTypes.any\n  })\n};\nvar childContextTypes = {\n  $bs_tabContent: PropTypes.shape({\n    bsClass: PropTypes.string,\n    animation: PropTypes.oneOfType([PropTypes.bool, elementType]),\n    activeKey: PropTypes.any,\n    unmountOnExit: PropTypes.bool,\n    onPaneEnter: PropTypes.func.isRequired,\n    onPaneExited: PropTypes.func.isRequired,\n    exiting: PropTypes.bool.isRequired\n  })\n};\n\nvar TabContent = function (_React$Component) {\n  _inherits(TabContent, _React$Component);\n\n  function TabContent(props, context) {\n    _classCallCheck(this, TabContent);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handlePaneEnter = _this.handlePaneEnter.bind(_this);\n    _this.handlePaneExited = _this.handlePaneExited.bind(_this); // Active entries in state will be `null` unless `animation` is set. Need\n    // to track active child in case keys swap and the active child changes\n    // but the active key does not.\n\n    _this.state = {\n      activeKey: null,\n      activeChild: null\n    };\n    return _this;\n  }\n\n  TabContent.prototype.getChildContext = function getChildContext() {\n    var _props = this.props;\n    var bsClass = _props.bsClass;\n    var animation = _props.animation;\n    var unmountOnExit = _props.unmountOnExit;\n    var stateActiveKey = this.state.activeKey;\n    var containerActiveKey = this.getContainerActiveKey();\n    var activeKey = stateActiveKey != null ? stateActiveKey : containerActiveKey;\n    var exiting = stateActiveKey != null && stateActiveKey !== containerActiveKey;\n    return {\n      $bs_tabContent: {\n        bsClass: bsClass,\n        animation: animation,\n        activeKey: activeKey,\n        unmountOnExit: unmountOnExit,\n        onPaneEnter: this.handlePaneEnter,\n        onPaneExited: this.handlePaneExited,\n        exiting: exiting\n      }\n    };\n  };\n\n  TabContent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (!nextProps.animation && this.state.activeChild) {\n      this.setState({\n        activeKey: null,\n        activeChild: null\n      });\n    }\n  };\n\n  TabContent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.isUnmounted = true;\n  };\n\n  TabContent.prototype.handlePaneEnter = function handlePaneEnter(child, childKey) {\n    if (!this.props.animation) {\n      return false;\n    } // It's possible that this child should be transitioning out.\n\n\n    if (childKey !== this.getContainerActiveKey()) {\n      return false;\n    }\n\n    this.setState({\n      activeKey: childKey,\n      activeChild: child\n    });\n    return true;\n  };\n\n  TabContent.prototype.handlePaneExited = function handlePaneExited(child) {\n    // This might happen as everything is unmounting.\n    if (this.isUnmounted) {\n      return;\n    }\n\n    this.setState(function (_ref) {\n      var activeChild = _ref.activeChild;\n\n      if (activeChild !== child) {\n        return null;\n      }\n\n      return {\n        activeKey: null,\n        activeChild: null\n      };\n    });\n  };\n\n  TabContent.prototype.getContainerActiveKey = function getContainerActiveKey() {\n    var tabContainer = this.context.$bs_tabContainer;\n    return tabContainer && tabContainer.activeKey;\n  };\n\n  TabContent.prototype.render = function render() {\n    var _props2 = this.props;\n    var Component = _props2.componentClass;\n    var className = _props2.className;\n\n    var props = _objectWithoutProperties(_props2, ['componentClass', 'className']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['animation', 'unmountOnExit']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1];\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, prefix(bsProps, 'content'))\n    }));\n  };\n\n  return TabContent;\n}(React.Component);\n\nTabContent.propTypes = propTypes;\nTabContent.defaultProps = defaultProps;\nTabContent.contextTypes = contextTypes;\nTabContent.childContextTypes = childContextTypes;\nexport default setBsClass('tab', TabContent);","map":null,"metadata":{},"sourceType":"module"}