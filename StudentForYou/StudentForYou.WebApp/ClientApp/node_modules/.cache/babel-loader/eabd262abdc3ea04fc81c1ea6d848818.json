{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { bsClass, getClassSet, prefix, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  inline: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n\n  /**\n   * Only valid if `inline` is not set.\n   */\n  validationState: React.PropTypes.oneOf(['success', 'warning', 'error']),\n\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <Checkbox inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: React.PropTypes.func\n};\nvar defaultProps = {\n  inline: false,\n  disabled: false\n};\n\nvar Checkbox = function (_React$Component) {\n  _inherits(Checkbox, _React$Component);\n\n  function Checkbox() {\n    _classCallCheck(this, Checkbox);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Checkbox.prototype.render = function render() {\n    var _props = this.props;\n    var inline = _props.inline;\n    var disabled = _props.disabled;\n    var validationState = _props.validationState;\n    var inputRef = _props.inputRef;\n    var className = _props.className;\n    var style = _props.style;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['inline', 'disabled', 'validationState', 'inputRef', 'className', 'style', 'children']);\n\n    var _splitBsProps = splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n    var input = React.createElement('input', _extends({}, elementProps, {\n      ref: inputRef,\n      type: 'checkbox',\n      disabled: disabled\n    }));\n\n    if (inline) {\n      var _classes2;\n\n      var _classes = (_classes2 = {}, _classes2[prefix(bsProps, 'inline')] = true, _classes2.disabled = disabled, _classes2); // Use a warning here instead of in propTypes to get better-looking\n      // generated documentation.\n\n\n      process.env.NODE_ENV !== 'production' ? warning(!validationState, '`validationState` is ignored on `<Checkbox inline>`. To display ' + 'validation state on an inline checkbox, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : void 0;\n      return React.createElement('label', {\n        className: classNames(className, _classes),\n        style: style\n      }, input, children);\n    }\n\n    var classes = _extends({}, getClassSet(bsProps), {\n      disabled: disabled\n    });\n\n    if (validationState) {\n      classes['has-' + validationState] = true;\n    }\n\n    return React.createElement('div', {\n      className: classNames(className, classes),\n      style: style\n    }, React.createElement('label', null, input, children));\n  };\n\n  return Checkbox;\n}(React.Component);\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\nexport default bsClass('checkbox', Checkbox);","map":null,"metadata":{},"sourceType":"module"}