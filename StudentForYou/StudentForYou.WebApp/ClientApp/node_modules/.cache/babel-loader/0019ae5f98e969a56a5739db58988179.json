{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Portal = require('./Portal');\n\nvar _Portal2 = _interopRequireDefault(_Portal);\n\nvar _Position = require('./Position');\n\nvar _Position2 = _interopRequireDefault(_Position);\n\nvar _RootCloseWrapper = require('./RootCloseWrapper');\n\nvar _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);\n\nvar _elementType = require('react-prop-types/lib/elementType');\n\nvar _elementType2 = _interopRequireDefault(_elementType);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.\n */\n\n\nvar Overlay = function (_React$Component) {\n  _inherits(Overlay, _React$Component);\n\n  function Overlay(props, context) {\n    _classCallCheck(this, Overlay);\n\n    var _this = _possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call(this, props, context));\n\n    _this.state = {\n      exited: !props.show\n    };\n    _this.onHiddenListener = _this.handleHidden.bind(_this);\n    return _this;\n  }\n\n  _createClass(Overlay, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.show) {\n        this.setState({\n          exited: false\n        });\n      } else if (!nextProps.transition) {\n        // Otherwise let handleHidden take care of marking exited.\n        this.setState({\n          exited: true\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          container = _props.container,\n          containerPadding = _props.containerPadding,\n          target = _props.target,\n          placement = _props.placement,\n          shouldUpdatePosition = _props.shouldUpdatePosition,\n          rootClose = _props.rootClose,\n          children = _props.children,\n          Transition = _props.transition,\n          props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'shouldUpdatePosition', 'rootClose', 'children', 'transition']); // Don't un-render the overlay while it's transitioning out.\n\n\n      var mountOverlay = props.show || Transition && !this.state.exited;\n\n      if (!mountOverlay) {\n        // Don't bother showing anything if we don't have to.\n        return null;\n      }\n\n      var child = children; // Position is be inner-most because it adds inline styles into the child,\n      // which the other wrappers don't forward correctly.\n\n      child = _react2.default.createElement(_Position2.default, {\n        container: container,\n        containerPadding: containerPadding,\n        target: target,\n        placement: placement,\n        shouldUpdatePosition: shouldUpdatePosition\n      }, child);\n\n      if (Transition) {\n        var onExit = props.onExit,\n            onExiting = props.onExiting,\n            onEnter = props.onEnter,\n            onEntering = props.onEntering,\n            onEntered = props.onEntered; // This animates the child node by injecting props, so it must precede\n        // anything that adds a wrapping div.\n\n        child = _react2.default.createElement(Transition, {\n          'in': props.show,\n          transitionAppear: true,\n          onExit: onExit,\n          onExiting: onExiting,\n          onExited: this.onHiddenListener,\n          onEnter: onEnter,\n          onEntering: onEntering,\n          onEntered: onEntered\n        }, child);\n      } // This goes after everything else because it adds a wrapping div.\n\n\n      if (rootClose) {\n        child = _react2.default.createElement(_RootCloseWrapper2.default, {\n          onRootClose: props.onHide\n        }, child);\n      }\n\n      return _react2.default.createElement(_Portal2.default, {\n        container: container\n      }, child);\n    }\n  }, {\n    key: 'handleHidden',\n    value: function handleHidden() {\n      this.setState({\n        exited: true\n      });\n\n      if (this.props.onExited) {\n        var _props2;\n\n        (_props2 = this.props).onExited.apply(_props2, arguments);\n      }\n    }\n  }]);\n\n  return Overlay;\n}(_react2.default.Component);\n\nOverlay.propTypes = _extends({}, _Portal2.default.propTypes, _Position2.default.propTypes, {\n  /**\n   * Set the visibility of the Overlay\n   */\n  show: _react2.default.PropTypes.bool,\n\n  /**\n   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay\n   */\n  rootClose: _react2.default.PropTypes.bool,\n\n  /**\n   * A Callback fired by the Overlay when it wishes to be hidden.\n   *\n   * __required__ when `rootClose` is `true`.\n   *\n   * @type func\n   */\n  onHide: function onHide(props) {\n    var propType = _react2.default.PropTypes.func;\n\n    if (props.rootClose) {\n      propType = propType.isRequired;\n    }\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return propType.apply(undefined, [props].concat(args));\n  },\n\n  /**\n   * A `<Transition/>` component used to animate the overlay changes visibility.\n   */\n  transition: _elementType2.default,\n\n  /**\n   * Callback fired before the Overlay transitions in\n   */\n  onEnter: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired as the Overlay begins to transition in\n   */\n  onEntering: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the Overlay finishes transitioning in\n   */\n  onEntered: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired right before the Overlay transitions out\n   */\n  onExit: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired as the Overlay begins to transition out\n   */\n  onExiting: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the Overlay finishes transitioning out\n   */\n  onExited: _react2.default.PropTypes.func\n});\nexports.default = Overlay;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}