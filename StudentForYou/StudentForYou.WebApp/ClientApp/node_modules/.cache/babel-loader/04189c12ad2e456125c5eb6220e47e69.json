{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits'; // TODO: Remove this pragma once we upgrade eslint-config-airbnb.\n\n/* eslint-disable react/no-multi-comp */\n\nimport classNames from 'classnames';\nimport React, { PropTypes } from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\nimport uncontrollable from 'uncontrollable';\nimport Grid from './Grid';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarHeader from './NavbarHeader';\nimport NavbarToggle from './NavbarToggle';\nimport { bsClass as setBsClass, bsStyles, getClassSet, prefix, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport { Style } from './utils/StyleConfig';\nvar propTypes = {\n  /**\n   * Create a fixed navbar along the top of the screen, that scrolls with the\n   * page\n   */\n  fixedTop: React.PropTypes.bool,\n\n  /**\n   * Create a fixed navbar along the bottom of the screen, that scrolls with\n   * the page\n   */\n  fixedBottom: React.PropTypes.bool,\n\n  /**\n   * Create a full-width navbar that scrolls away with the page\n   */\n  staticTop: React.PropTypes.bool,\n\n  /**\n   * An alternative dark visual style for the Navbar\n   */\n  inverse: React.PropTypes.bool,\n\n  /**\n   * Allow the Navbar to fluidly adjust to the page or container width, instead\n   * of at the predefined screen breakpoints\n   */\n  fluid: React.PropTypes.bool,\n\n  /**\n   * Set a custom element for this component.\n   */\n  componentClass: elementType,\n\n  /**\n   * A callback fired when the `<Navbar>` body collapses or expands. Fired when\n   * a `<Navbar.Toggle>` is clicked and called with the new `navExpanded`\n   * boolean value.\n   *\n   * @controllable navExpanded\n   */\n  onToggle: React.PropTypes.func,\n\n  /**\n   * Explicitly set the visiblity of the navbar body\n   *\n   * @controllable onToggle\n   */\n  expanded: React.PropTypes.bool,\n  role: React.PropTypes.string\n};\nvar defaultProps = {\n  componentClass: 'nav',\n  fixedTop: false,\n  fixedBottom: false,\n  staticTop: false,\n  inverse: false,\n  fluid: false\n};\nvar childContextTypes = {\n  $bs_navbar: PropTypes.shape({\n    bsClass: PropTypes.string,\n    expanded: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired\n  })\n};\n\nvar Navbar = function (_React$Component) {\n  _inherits(Navbar, _React$Component);\n\n  function Navbar(props, context) {\n    _classCallCheck(this, Navbar);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    return _this;\n  }\n\n  Navbar.prototype.getChildContext = function getChildContext() {\n    var _props = this.props;\n    var bsClass = _props.bsClass;\n    var expanded = _props.expanded;\n    return {\n      $bs_navbar: {\n        bsClass: bsClass,\n        expanded: expanded,\n        onToggle: this.handleToggle\n      }\n    };\n  };\n\n  Navbar.prototype.handleToggle = function handleToggle() {\n    var _props2 = this.props;\n    var onToggle = _props2.onToggle;\n    var expanded = _props2.expanded;\n    onToggle(!expanded);\n  };\n\n  Navbar.prototype.render = function render() {\n    var _extends2;\n\n    var _props3 = this.props;\n    var Component = _props3.componentClass;\n    var fixedTop = _props3.fixedTop;\n    var fixedBottom = _props3.fixedBottom;\n    var staticTop = _props3.staticTop;\n    var inverse = _props3.inverse;\n    var fluid = _props3.fluid;\n    var className = _props3.className;\n    var children = _props3.children;\n\n    var props = _objectWithoutProperties(_props3, ['componentClass', 'fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'fluid', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['expanded', 'onToggle']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1]; // will result in some false positives but that seems better\n    // than false negatives. strict `undefined` check allows explicit\n    // \"nulling\" of the role if the user really doesn't want one\n\n    if (elementProps.role === undefined && Component !== 'nav') {\n      elementProps.role = 'navigation';\n    }\n\n    if (inverse) {\n      bsProps.bsStyle = Style.INVERSE;\n    }\n\n    var classes = _extends({}, getClassSet(bsProps), (_extends2 = {}, _extends2[prefix(bsProps, 'fixed-top')] = fixedTop, _extends2[prefix(bsProps, 'fixed-bottom')] = fixedBottom, _extends2[prefix(bsProps, 'static-top')] = staticTop, _extends2));\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), React.createElement(Grid, {\n      fluid: fluid\n    }, children));\n  };\n\n  return Navbar;\n}(React.Component);\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nNavbar.childContextTypes = childContextTypes;\nsetBsClass('navbar', Navbar);\nvar UncontrollableNavbar = uncontrollable(Navbar, {\n  expanded: 'onToggle'\n});\n\nfunction createSimpleWrapper(tag, suffix, displayName) {\n  var Wrapper = function Wrapper(_ref, _ref2) {\n    var Component = _ref.componentClass;\n    var className = _ref.className;\n    var pullRight = _ref.pullRight;\n    var pullLeft = _ref.pullLeft;\n\n    var props = _objectWithoutProperties(_ref, ['componentClass', 'className', 'pullRight', 'pullLeft']);\n\n    var _ref2$$bs_navbar = _ref2.$bs_navbar;\n    var navbarProps = _ref2$$bs_navbar === undefined ? {\n      bsClass: 'navbar'\n    } : _ref2$$bs_navbar;\n    return React.createElement(Component, _extends({}, props, {\n      className: classNames(className, prefix(navbarProps, suffix), pullRight && prefix(navbarProps, 'right'), pullLeft && prefix(navbarProps, 'left'))\n    }));\n  };\n\n  Wrapper.displayName = displayName;\n  Wrapper.propTypes = {\n    componentClass: elementType,\n    pullRight: React.PropTypes.bool,\n    pullLeft: React.PropTypes.bool\n  };\n  Wrapper.defaultProps = {\n    componentClass: tag,\n    pullRight: false,\n    pullLeft: false\n  };\n  Wrapper.contextTypes = {\n    $bs_navbar: PropTypes.shape({\n      bsClass: PropTypes.string\n    })\n  };\n  return Wrapper;\n}\n\nUncontrollableNavbar.Brand = NavbarBrand;\nUncontrollableNavbar.Header = NavbarHeader;\nUncontrollableNavbar.Toggle = NavbarToggle;\nUncontrollableNavbar.Collapse = NavbarCollapse;\nUncontrollableNavbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');\nUncontrollableNavbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');\nUncontrollableNavbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink'); // Set bsStyles here so they can be overridden.\n\nexport default bsStyles([Style.DEFAULT, Style.INVERSE], Style.DEFAULT, UncontrollableNavbar);","map":null,"metadata":{},"sourceType":"module"}