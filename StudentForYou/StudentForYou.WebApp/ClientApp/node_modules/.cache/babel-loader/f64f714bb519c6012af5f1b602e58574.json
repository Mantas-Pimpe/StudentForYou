{"ast":null,"code":"import _Object$values from 'babel-runtime/core-js/object/values';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { bsClass, bsStyles, getClassSet, prefix, splitBsProps } from './utils/bootstrapUtils';\nimport { State } from './utils/StyleConfig';\nvar propTypes = {\n  active: React.PropTypes.any,\n  disabled: React.PropTypes.any,\n  header: React.PropTypes.node,\n  listItem: React.PropTypes.bool,\n  onClick: React.PropTypes.func,\n  href: React.PropTypes.string,\n  type: React.PropTypes.string\n};\nvar defaultProps = {\n  listItem: false\n};\n\nvar ListGroupItem = function (_React$Component) {\n  _inherits(ListGroupItem, _React$Component);\n\n  function ListGroupItem() {\n    _classCallCheck(this, ListGroupItem);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ListGroupItem.prototype.renderHeader = function renderHeader(header, headingClassName) {\n    if (React.isValidElement(header)) {\n      return cloneElement(header, {\n        className: classNames(header.props.className, headingClassName)\n      });\n    }\n\n    return React.createElement('h4', {\n      className: headingClassName\n    }, header);\n  };\n\n  ListGroupItem.prototype.render = function render() {\n    var _props = this.props;\n    var active = _props.active;\n    var disabled = _props.disabled;\n    var className = _props.className;\n    var header = _props.header;\n    var listItem = _props.listItem;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['active', 'disabled', 'className', 'header', 'listItem', 'children']);\n\n    var _splitBsProps = splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n\n    var classes = _extends({}, getClassSet(bsProps), {\n      active: active,\n      disabled: disabled\n    });\n\n    var Component = void 0;\n\n    if (elementProps.href) {\n      Component = 'a';\n    } else if (elementProps.onClick) {\n      Component = 'button';\n      elementProps.type = elementProps.type || 'button';\n    } else if (listItem) {\n      Component = 'li';\n    } else {\n      Component = 'span';\n    }\n\n    elementProps.className = classNames(className, classes); // TODO: Deprecate `header` prop.\n\n    if (header) {\n      return React.createElement(Component, elementProps, this.renderHeader(header, prefix(bsProps, 'heading')), React.createElement('p', {\n        className: prefix(bsProps, 'text')\n      }, children));\n    }\n\n    return React.createElement(Component, elementProps, children);\n  };\n\n  return ListGroupItem;\n}(React.Component);\n\nListGroupItem.propTypes = propTypes;\nListGroupItem.defaultProps = defaultProps;\nexport default bsClass('list-group-item', bsStyles(_Object$values(State), ListGroupItem));","map":null,"metadata":{},"sourceType":"module"}