{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar NotificationItem = require('./NotificationItem');\n\nvar Constants = require('./constants');\n\nclass NotificationContainer extends React.Component {\n  constructor(props) {\n    super(props); // Fix position if width is overrided\n\n    this._style = props.getStyles.container(props.position);\n\n    if (props.getStyles.overrideWidth && (props.position === Constants.positions.tc || props.position === Constants.positions.bc)) {\n      this._style.marginLeft = -(props.getStyles.overrideWidth / 2);\n    }\n  }\n\n  render() {\n    var notifications;\n\n    if ([Constants.positions.bl, Constants.positions.br, Constants.positions.bc].indexOf(this.props.position) > -1) {\n      this.props.notifications.reverse();\n    }\n\n    notifications = this.props.notifications.map(notification => {\n      return React.createElement(NotificationItem, {\n        ref: 'notification-' + notification.uid,\n        key: notification.uid,\n        notification: notification,\n        getStyles: this.props.getStyles,\n        onRemove: this.props.onRemove,\n        noAnimation: this.props.noAnimation,\n        allowHTML: this.props.allowHTML,\n        children: this.props.children\n      });\n    });\n    return React.createElement(\"div\", {\n      className: 'notifications-' + this.props.position,\n      style: this._style\n    }, notifications);\n  }\n\n}\n\nNotificationContainer.propTypes = {\n  position: PropTypes.string.isRequired,\n  notifications: PropTypes.array.isRequired,\n  getStyles: PropTypes.object,\n  onRemove: PropTypes.func,\n  noAnimation: PropTypes.bool,\n  allowHTML: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n};\nmodule.exports = NotificationContainer;","map":null,"metadata":{},"sourceType":"script"}