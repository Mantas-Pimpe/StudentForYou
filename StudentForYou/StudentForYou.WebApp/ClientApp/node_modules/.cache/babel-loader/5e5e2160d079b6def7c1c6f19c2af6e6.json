{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manta\\\\source\\\\repos\\\\StudentForYou\\\\StudentForYou\\\\StudentForYou.WebApp\\\\ClientApp\\\\src\\\\components\\\\api-authorization\\\\Login.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants'; // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n\n    switch (action) {\n      case LoginActions.Login:\n        this.login(this.getReturnUrl());\n        break;\n\n      case LoginActions.LoginCallback:\n        this.processLoginCallback();\n        break;\n\n      case LoginActions.LoginFailed:\n        const params = new URLSearchParams(window.location.search);\n        const error = params.get(QueryParameterNames.Message);\n        this.setState({\n          message: error\n        });\n        break;\n\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n\n      default:\n        throw new Error(\"Invalid action '\".concat(action, \"'\"));\n    }\n  }\n\n  render() {\n    const action = this.props.action;\n    const message = this.state.message;\n\n    if (!!message) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, message);\n    } else {\n      switch (action) {\n        case LoginActions.Login:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, \"Processing login\");\n\n        case LoginActions.LoginCallback:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, \"Processing login callback\");\n\n        case LoginActions.Profile:\n        case LoginActions.Register:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          });\n\n        default:\n          throw new Error(\"Invalid action '\".concat(action, \"'\"));\n      }\n    }\n  }\n\n  async login(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const result = await authService.signIn(state);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(\"Invalid status result \".concat(result.status, \".\"));\n    }\n  }\n\n  async processLoginCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignIn(url);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeSignIn finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error('Should not redirect.');\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(\"Invalid authentication result status '\".concat(result.status, \"'.\"));\n    }\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n\n    if (fromQuery && !fromQuery.startsWith(\"\".concat(window.location.origin, \"/\"))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n\n    return state && state.returnUrl || fromQuery || \"\".concat(window.location.origin, \"/\");\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(\"\".concat(ApplicationPaths.IdentityRegisterPath, \"?\").concat(QueryParameterNames.ReturnUrl, \"=\").concat(encodeURI(ApplicationPaths.Login)));\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    const redirectUrl = \"\".concat(window.location.origin).concat(apiAuthorizationPath); // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser he gets sent back to where it was on the app instead of to an endpoint on this\n    // component.\n\n    window.location.replace(redirectUrl);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    // It's important that we do a replace here so that we remove the callback uri with the\n    // fragment containing the tokens from the browser history.\n    window.location.replace(returnUrl);\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\manta\\source\\repos\\StudentForYou\\StudentForYou\\StudentForYou.WebApp\\ClientApp\\src\\components\\api-authorization\\Login.js"],"names":["React","Component","authService","AuthenticationResultStatus","LoginActions","QueryParameterNames","ApplicationPaths","Login","constructor","props","state","message","undefined","componentDidMount","action","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","params","URLSearchParams","window","location","search","error","get","Message","setState","Profile","redirectToProfile","Register","redirectToRegister","Error","render","returnUrl","result","signIn","status","Redirect","Success","navigateToReturnUrl","Fail","url","href","completeSignIn","fromQuery","ReturnUrl","startsWith","origin","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","apiAuthorizationPath","redirectUrl","replace"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\nexport class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LoginActions.Login:\r\n                this.login(this.getReturnUrl());\r\n                break;\r\n            case LoginActions.LoginCallback:\r\n                this.processLoginCallback();\r\n                break;\r\n            case LoginActions.LoginFailed:\r\n                const params = new URLSearchParams(window.location.search);\r\n                const error = params.get(QueryParameterNames.Message);\r\n                this.setState({ message: error });\r\n                break;\r\n            case LoginActions.Profile:\r\n                this.redirectToProfile();\r\n                break;\r\n            case LoginActions.Register:\r\n                this.redirectToRegister();\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const action = this.props.action;\r\n        const { message } = this.state;\r\n\r\n        if (!!message) {\r\n            return <div>{message}</div>\r\n        } else {\r\n            switch (action) {\r\n                case LoginActions.Login:\r\n                    return (<div>Processing login</div>);\r\n                case LoginActions.LoginCallback:\r\n                    return (<div>Processing login callback</div>);\r\n                case LoginActions.Profile:\r\n                case LoginActions.Register:\r\n                    return (<div></div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async login(returnUrl) {\r\n        const state = { returnUrl };\r\n        const result = await authService.signIn(state);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                break;\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(returnUrl);\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid status result ${result.status}.`);\r\n        }\r\n    }\r\n\r\n    async processLoginCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignIn(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeSignIn finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\r\n        }\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\r\n    }\r\n\r\n    redirectToRegister() {\r\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\r\n    }\r\n\r\n    redirectToProfile() {\r\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n    }\r\n\r\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\r\n        const redirectUrl = `${window.location.origin}${apiAuthorizationPath}`;\r\n        // It's important that we do a replace here so that when the user hits the back arrow on the\r\n        // browser he gets sent back to where it was on the app instead of to an endpoint on this\r\n        // component.\r\n        window.location.replace(redirectUrl);\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        // It's important that we do a replace here so that we remove the callback uri with the\r\n        // fragment containing the tokens from the browser history.\r\n        window.location.replace(returnUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}