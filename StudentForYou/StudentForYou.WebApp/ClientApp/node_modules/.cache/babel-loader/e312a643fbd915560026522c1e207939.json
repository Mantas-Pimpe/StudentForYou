{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nimport createChainedFunction from './utils/createChainedFunction'; // TODO: `aria-label` should be `closeLabel`.\n\nvar propTypes = {\n  /**\n   * The 'aria-label' attribute provides an accessible label for the close\n   * button. It is used for Assistive Technology when the label text is not\n   * readable.\n   */\n  'aria-label': React.PropTypes.string,\n\n  /**\n   * Specify whether the Component should contain a close button\n   */\n  closeButton: React.PropTypes.bool,\n\n  /**\n   * A Callback fired when the close button is clicked. If used directly inside\n   * a Modal component, the onHide will automatically be propagated up to the\n   * parent Modal `onHide`.\n   */\n  onHide: React.PropTypes.func\n};\nvar defaultProps = {\n  'aria-label': 'Close',\n  closeButton: false\n};\nvar contextTypes = {\n  $bs_modal: React.PropTypes.shape({\n    onHide: React.PropTypes.func\n  })\n};\n\nvar ModalHeader = function (_React$Component) {\n  _inherits(ModalHeader, _React$Component);\n\n  function ModalHeader() {\n    _classCallCheck(this, ModalHeader);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ModalHeader.prototype.render = function render() {\n    var _props = this.props;\n    var label = _props['aria-label'];\n    var closeButton = _props.closeButton;\n    var onHide = _props.onHide;\n    var className = _props.className;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['aria-label', 'closeButton', 'onHide', 'className', 'children']);\n\n    var modal = this.context.$bs_modal;\n\n    var _splitBsProps = splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n    var classes = getClassSet(bsProps);\n    return React.createElement('div', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), closeButton && React.createElement('button', {\n      type: 'button',\n      className: 'close',\n      'aria-label': label,\n      onClick: createChainedFunction(modal.onHide, onHide)\n    }, React.createElement('span', {\n      'aria-hidden': 'true'\n    }, 'Ã—')), children);\n  };\n\n  return ModalHeader;\n}(React.Component);\n\nModalHeader.propTypes = propTypes;\nModalHeader.defaultProps = defaultProps;\nModalHeader.contextTypes = contextTypes;\nexport default bsClass('modal-header', ModalHeader);","map":null,"metadata":{},"sourceType":"module"}