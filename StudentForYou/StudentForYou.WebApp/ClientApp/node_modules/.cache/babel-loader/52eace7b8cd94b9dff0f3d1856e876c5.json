{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\manta\\\\source\\\\repos\\\\StudentForYou\\\\StudentForYou\\\\StudentForYou.WebApp\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\manta\\\\source\\\\repos\\\\StudentForYou\\\\StudentForYou\\\\StudentForYou.WebApp\\\\ClientApp\\\\src\\\\components\\\\api-authorization\\\\AuthorizeRoute.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants';\nimport authService from './AuthorizeService';\nexport default class AuthorizeRoute extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ready: false,\n      authenticated: false\n    };\n  }\n\n  componentDidMount() {\n    this._subscription = authService.subscribe(() => this.authenticationChanged());\n    this.populateAuthenticationState();\n  }\n\n  componentWillUnmount() {\n    authService.unsubscribe(this._subscription);\n  }\n\n  render() {\n    const _this$state = this.state,\n          ready = _this$state.ready,\n          authenticated = _this$state.authenticated;\n    const redirectUrl = \"\".concat(ApplicationPaths.Login, \"?\").concat(QueryParameterNames.ReturnUrl, \"=\").concat(encodeURI(window.location.href));\n\n    if (!ready) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    } else {\n      const _this$props = this.props,\n            Component = _this$props.component,\n            rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(Route, Object.assign({}, rest, {\n        render: props => {\n          if (authenticated) {\n            return React.createElement(Component, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36\n              },\n              __self: this\n            }));\n          } else {\n            return React.createElement(Redirect, {\n              to: redirectUrl,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n  }\n\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({\n      ready: true,\n      authenticated\n    });\n  }\n\n  async authenticationChanged() {\n    this.setState({\n      ready: false,\n      authenticated: false\n    });\n    await this.populateAuthenticationState();\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\manta\\source\\repos\\StudentForYou\\StudentForYou\\StudentForYou.WebApp\\ClientApp\\src\\components\\api-authorization\\AuthorizeRoute.js"],"names":["React","Component","Route","Redirect","ApplicationPaths","QueryParameterNames","authService","AuthorizeRoute","constructor","props","state","ready","authenticated","componentDidMount","_subscription","subscribe","authenticationChanged","populateAuthenticationState","componentWillUnmount","unsubscribe","render","redirectUrl","Login","ReturnUrl","encodeURI","window","location","href","component","rest","isAuthenticated","setState"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,6BAAtD;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,eAAe,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AAClDO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,KADE;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,aAAL,GAAqBR,WAAW,CAACS,SAAZ,CAAsB,MAAM,KAAKC,qBAAL,EAA5B,CAArB;AACA,SAAKC,2BAAL;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnBZ,IAAAA,WAAW,CAACa,WAAZ,CAAwB,KAAKL,aAA7B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AAAA,wBAC4B,KAAKV,KADjC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,aADV,eACUA,aADV;AAEL,UAAMS,WAAW,aAAMjB,gBAAgB,CAACkB,KAAvB,cAAgCjB,mBAAmB,CAACkB,SAApD,cAAiEC,SAAS,CAACC,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAA1E,CAAjB;;AACA,QAAI,CAAChB,KAAL,EAAY;AACR,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEO;AAAA,0BACuC,KAAKF,KAD5C;AAAA,YACgBR,SADhB,eACK2B,SADL;AAAA,YAC8BC,IAD9B;;AAEH,aAAO,oBAAC,KAAD,oBAAWA,IAAX;AACH,QAAA,MAAM,EAAGpB,KAAD,IAAW;AACf,cAAIG,aAAJ,EAAmB;AACf,mBAAO,oBAAC,SAAD,oBAAeH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACH,WAFD,MAEO;AACH,mBAAO,oBAAC,QAAD;AAAU,cAAA,EAAE,EAAEY,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ,SAPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAQH;AACJ;;AAED,QAAMJ,2BAAN,GAAoC;AAChC,UAAML,aAAa,GAAG,MAAMN,WAAW,CAACwB,eAAZ,EAA5B;AACA,SAAKC,QAAL,CAAc;AAAEpB,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA;AAAf,KAAd;AACH;;AAED,QAAMI,qBAAN,GAA8B;AAC1B,SAAKe,QAAL,CAAc;AAAEpB,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,aAAa,EAAE;AAA/B,KAAd;AACA,UAAM,KAAKK,2BAAL,EAAN;AACH;;AA7CiD","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants'\r\nimport authService from './AuthorizeService'\r\n\r\nexport default class AuthorizeRoute extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ready: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.authenticationChanged());\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    render() {\r\n        const { ready, authenticated } = this.state;\r\n        const redirectUrl = `${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURI(window.location.href)}`\r\n        if (!ready) {\r\n            return <div></div>;\r\n        } else {\r\n            const { component: Component, ...rest } = this.props;\r\n            return <Route {...rest}\r\n                render={(props) => {\r\n                    if (authenticated) {\r\n                        return <Component {...props} />\r\n                    } else {\r\n                        return <Redirect to={redirectUrl} />\r\n                    }\r\n                }} />\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ ready: true, authenticated });\r\n    }\r\n\r\n    async authenticationChanged() {\r\n        this.setState({ ready: false, authenticated: false });\r\n        await this.populateAuthenticationState();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}