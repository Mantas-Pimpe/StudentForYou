{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\nimport warning from 'warning';\nimport FormControlFeedback from './FormControlFeedback';\nimport FormControlStatic from './FormControlStatic';\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  componentClass: elementType,\n\n  /**\n   * Only relevant if `componentClass` is `'input'`.\n   */\n  type: React.PropTypes.string,\n\n  /**\n   * Uses `controlId` from `<FormGroup>` if not explicitly specified.\n   */\n  id: React.PropTypes.string\n};\nvar defaultProps = {\n  componentClass: 'input'\n};\nvar contextTypes = {\n  $bs_formGroup: React.PropTypes.object\n};\n\nvar FormControl = function (_React$Component) {\n  _inherits(FormControl, _React$Component);\n\n  function FormControl() {\n    _classCallCheck(this, FormControl);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  FormControl.prototype.render = function render() {\n    var formGroup = this.context.$bs_formGroup;\n    var controlId = formGroup && formGroup.controlId;\n    var _props = this.props;\n    var Component = _props.componentClass;\n    var type = _props.type;\n    var _props$id = _props.id;\n    var id = _props$id === undefined ? controlId : _props$id;\n    var className = _props.className;\n\n    var props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'className']);\n\n    var _splitBsProps = splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n    process.env.NODE_ENV !== 'production' ? warning(controlId == null || id === controlId, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0; // input[type=\"file\"] should not have .form-control.\n\n    var classes = void 0;\n\n    if (type !== 'file') {\n      classes = getClassSet(bsProps);\n    }\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      type: type,\n      id: id,\n      className: classNames(className, classes)\n    }));\n  };\n\n  return FormControl;\n}(React.Component);\n\nFormControl.propTypes = propTypes;\nFormControl.defaultProps = defaultProps;\nFormControl.contextTypes = contextTypes;\nFormControl.Feedback = FormControlFeedback;\nFormControl.Static = FormControlStatic;\nexport default bsClass('form-control', FormControl);","map":null,"metadata":{},"sourceType":"module"}