{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _on = require('dom-helpers/events/on');\n\nvar _on2 = _interopRequireDefault(_on);\n\nvar _properties = require('dom-helpers/transition/properties');\n\nvar _properties2 = _interopRequireDefault(_properties);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar transitionEndEvent = _properties2.default.end;\nvar UNMOUNTED = exports.UNMOUNTED = 0;\nvar EXITED = exports.EXITED = 1;\nvar ENTERING = exports.ENTERING = 2;\nvar ENTERED = exports.ENTERED = 3;\nvar EXITING = exports.EXITING = 4;\n/**\n * The Transition component lets you define and run css transitions with a simple declarative api.\n * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)\n * but is specifically optimized for transitioning a single child \"in\" or \"out\".\n *\n * You don't even need to use class based css transitions if you don't want to (but it is easiest).\n * The extensive set of lifecycle callbacks means you have control over\n * the transitioning now at each step of the way.\n */\n\nvar Transition = function (_React$Component) {\n  _inherits(Transition, _React$Component);\n\n  function Transition(props, context) {\n    _classCallCheck(this, Transition);\n\n    var _this = _possibleConstructorReturn(this, (Transition.__proto__ || Object.getPrototypeOf(Transition)).call(this, props, context));\n\n    var initialStatus = void 0;\n    _this.nextStatus = null;\n\n    if (props.in) {\n      if (props.transitionAppear) {\n        initialStatus = EXITED;\n        _this.nextStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  _createClass(Transition, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.updateStatus();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var status = this.state.status;\n\n      if (nextProps.in) {\n        if (status === UNMOUNTED) {\n          this.setState({\n            status: EXITED\n          });\n        }\n\n        if (status !== ENTERING && status !== ENTERED) {\n          this.nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          this.nextStatus = EXITING;\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.updateStatus();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.cancelNextCallback();\n    }\n  }, {\n    key: 'updateStatus',\n    value: function updateStatus() {\n      var _this2 = this;\n\n      if (this.nextStatus !== null) {\n        // nextStatus will always be ENTERING or EXITING.\n        this.cancelNextCallback();\n\n        var node = _reactDom2.default.findDOMNode(this);\n\n        if (this.nextStatus === ENTERING) {\n          this.props.onEnter(node);\n          this.safeSetState({\n            status: ENTERING\n          }, function () {\n            _this2.props.onEntering(node);\n\n            _this2.onTransitionEnd(node, function () {\n              _this2.safeSetState({\n                status: ENTERED\n              }, function () {\n                _this2.props.onEntered(node);\n              });\n            });\n          });\n        } else {\n          this.props.onExit(node);\n          this.safeSetState({\n            status: EXITING\n          }, function () {\n            _this2.props.onExiting(node);\n\n            _this2.onTransitionEnd(node, function () {\n              _this2.safeSetState({\n                status: EXITED\n              }, function () {\n                _this2.props.onExited(node);\n              });\n            });\n          });\n        }\n\n        this.nextStatus = null;\n      } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n        this.setState({\n          status: UNMOUNTED\n        });\n      }\n    }\n  }, {\n    key: 'cancelNextCallback',\n    value: function cancelNextCallback() {\n      if (this.nextCallback !== null) {\n        this.nextCallback.cancel();\n        this.nextCallback = null;\n      }\n    }\n  }, {\n    key: 'safeSetState',\n    value: function safeSetState(nextState, callback) {\n      // This shouldn't be necessary, but there are weird race conditions with\n      // setState callbacks and unmounting in testing, so always make sure that\n      // we can cancel any pending setState callbacks after we unmount.\n      this.setState(nextState, this.setNextCallback(callback));\n    }\n  }, {\n    key: 'setNextCallback',\n    value: function setNextCallback(callback) {\n      var _this3 = this;\n\n      var active = true;\n\n      this.nextCallback = function (event) {\n        if (active) {\n          active = false;\n          _this3.nextCallback = null;\n          callback(event);\n        }\n      };\n\n      this.nextCallback.cancel = function () {\n        active = false;\n      };\n\n      return this.nextCallback;\n    }\n  }, {\n    key: 'onTransitionEnd',\n    value: function onTransitionEnd(node, handler) {\n      this.setNextCallback(handler);\n\n      if (node) {\n        (0, _on2.default)(node, transitionEndEvent, this.nextCallback);\n        setTimeout(this.nextCallback, this.props.timeout);\n      } else {\n        setTimeout(this.nextCallback, 0);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var status = this.state.status;\n\n      if (status === UNMOUNTED) {\n        return null;\n      }\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          childProps = _objectWithoutProperties(_props, ['children', 'className']);\n\n      Object.keys(Transition.propTypes).forEach(function (key) {\n        return delete childProps[key];\n      });\n      var transitionClassName = void 0;\n\n      if (status === EXITED) {\n        transitionClassName = this.props.exitedClassName;\n      } else if (status === ENTERING) {\n        transitionClassName = this.props.enteringClassName;\n      } else if (status === ENTERED) {\n        transitionClassName = this.props.enteredClassName;\n      } else if (status === EXITING) {\n        transitionClassName = this.props.exitingClassName;\n      }\n\n      var child = _react2.default.Children.only(children);\n\n      return _react2.default.cloneElement(child, _extends({}, childProps, {\n        className: (0, _classnames2.default)(child.props.className, className, transitionClassName)\n      }));\n    }\n  }]);\n\n  return Transition;\n}(_react2.default.Component);\n\nTransition.propTypes = {\n  /**\n   * Show the component; triggers the enter or exit animation\n   */\n  in: _react2.default.PropTypes.bool,\n\n  /**\n   * Wait until the first \"enter\" transition to mount the component (add it to the DOM)\n   */\n  mountOnEnter: _react2.default.PropTypes.bool,\n\n  /**\n   * Unmount the component (remove it from the DOM) when it is not shown\n   */\n  unmountOnExit: _react2.default.PropTypes.bool,\n\n  /**\n   * Run the enter animation when the component mounts, if it is initially\n   * shown\n   */\n  transitionAppear: _react2.default.PropTypes.bool,\n\n  /**\n   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't\n   * transition indefinately if the browser transitionEnd events are\n   * canceled or interrupted.\n   *\n   * By default this is set to a high number (5 seconds) as a failsafe. You should consider\n   * setting this to the duration of your animation (or a bit above it).\n   */\n  timeout: _react2.default.PropTypes.number,\n\n  /**\n   * CSS class or classes applied when the component is exited\n   */\n  exitedClassName: _react2.default.PropTypes.string,\n\n  /**\n   * CSS class or classes applied while the component is exiting\n   */\n  exitingClassName: _react2.default.PropTypes.string,\n\n  /**\n   * CSS class or classes applied when the component is entered\n   */\n  enteredClassName: _react2.default.PropTypes.string,\n\n  /**\n   * CSS class or classes applied while the component is entering\n   */\n  enteringClassName: _react2.default.PropTypes.string,\n\n  /**\n   * Callback fired before the \"entering\" classes are applied\n   */\n  onEnter: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" classes are applied\n   */\n  onEntering: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the \"enter\" classes are applied\n   */\n  onEntered: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" classes are applied\n   */\n  onExit: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" classes are applied\n   */\n  onExiting: _react2.default.PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" classes are applied\n   */\n  onExited: _react2.default.PropTypes.func\n}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.displayName = 'Transition';\nTransition.defaultProps = {\n  in: false,\n  unmountOnExit: false,\n  transitionAppear: false,\n  timeout: 5000,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nexports.default = Transition;","map":null,"metadata":{},"sourceType":"script"}