{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar merge = require('object-assign');\n\nvar NotificationContainer = require('./NotificationContainer');\n\nvar Constants = require('./constants');\n\nvar Styles = require('./styles');\n\nclass NotificationSystem extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      notifications: []\n    };\n    this.uid = 3400;\n    this._isMounted = false;\n    this.overrideWidth = null;\n    this.overrideStyle = {};\n    this.elements = {\n      notification: 'NotificationItem',\n      title: 'Title',\n      messageWrapper: 'MessageWrapper',\n      dismiss: 'Dismiss',\n      action: 'Action',\n      actionWrapper: 'ActionWrapper'\n    };\n    this.setOverrideStyle = this.setOverrideStyle.bind(this);\n    this.wrapper = this.wrapper.bind(this);\n    this.container = this.container.bind(this);\n    this.byElement = this.byElement.bind(this);\n    this._didNotificationRemoved = this._didNotificationRemoved.bind(this);\n    this.addNotification = this.addNotification.bind(this);\n    this.getNotificationRef = this.getNotificationRef.bind(this);\n    this.removeNotification = this.removeNotification.bind(this);\n    this.editNotification = this.editNotification.bind(this);\n    this.clearNotifications = this.clearNotifications.bind(this);\n    this._getStyles = {\n      overrideWidth: this.overrideWidth,\n      overrideStyle: this.overrideStyle,\n      elements: this.elements,\n      setOverrideStyle: this.setOverrideStyle,\n      wrapper: this.wrapper,\n      container: this.container,\n      byElement: this.byElement\n    };\n  }\n\n  componentDidMount() {\n    this.setOverrideStyle(this.props.style);\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setOverrideStyle(style) {\n    this.overrideStyle = style;\n  }\n\n  wrapper() {\n    if (!this.overrideStyle) return {};\n    return merge({}, Styles.Wrapper, this.overrideStyle.Wrapper);\n  }\n\n  container(position) {\n    var override = this.overrideStyle.Containers || {};\n    if (!this.overrideStyle) return {};\n    this.overrideWidth = Styles.Containers.DefaultStyle.width;\n\n    if (override.DefaultStyle && override.DefaultStyle.width) {\n      this.overrideWidth = override.DefaultStyle.width;\n    }\n\n    if (override[position] && override[position].width) {\n      this.overrideWidth = override[position].width;\n    }\n\n    return merge({}, Styles.Containers.DefaultStyle, Styles.Containers[position], override.DefaultStyle, override[position]);\n  }\n\n  byElement(element) {\n    return level => {\n      var _element = this.elements[element];\n      var override = this.overrideStyle[_element] || {};\n      if (!this.overrideStyle) return {};\n      return merge({}, Styles[_element].DefaultStyle, Styles[_element][level], override.DefaultStyle, override[level]);\n    };\n  }\n\n  _didNotificationRemoved(uid) {\n    var notification;\n    var notifications = this.state.notifications.filter(function (toCheck) {\n      if (toCheck.uid === uid) {\n        notification = toCheck;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (this._isMounted) {\n      this.setState({\n        notifications: notifications\n      });\n    }\n\n    if (notification && notification.onRemove) {\n      notification.onRemove(notification);\n    }\n  }\n\n  addNotification(notification) {\n    var _notification = merge({}, Constants.notification, notification);\n\n    var notifications = this.state.notifications;\n    var i;\n\n    if (!_notification.level) {\n      throw new Error('notification level is required.');\n    }\n\n    if (Object.keys(Constants.levels).indexOf(_notification.level) === -1) {\n      throw new Error(\"'\" + _notification.level + \"' is not a valid level.\");\n    } // eslint-disable-next-line\n\n\n    if (isNaN(_notification.autoDismiss)) {\n      throw new Error(\"'autoDismiss' must be a number.\");\n    }\n\n    if (Object.keys(Constants.positions).indexOf(_notification.position) === -1) {\n      throw new Error(\"'\" + _notification.position + \"' is not a valid position.\");\n    } // Some preparations\n\n\n    _notification.position = _notification.position.toLowerCase();\n    _notification.level = _notification.level.toLowerCase();\n    _notification.autoDismiss = parseInt(_notification.autoDismiss, 10);\n    _notification.uid = _notification.uid || this.uid;\n    _notification.ref = 'notification-' + _notification.uid;\n    this.uid += 1; // do not add if the notification already exists based on supplied uid\n\n    for (i = 0; i < notifications.length; i += 1) {\n      if (notifications[i].uid === _notification.uid) {\n        return false;\n      }\n    }\n\n    notifications.push(_notification);\n\n    if (typeof _notification.onAdd === 'function') {\n      notification.onAdd(_notification);\n    }\n\n    this.setState({\n      notifications: notifications\n    });\n    return _notification;\n  }\n\n  getNotificationRef(notification) {\n    var foundNotification = null;\n    Object.keys(this.refs).forEach(container => {\n      if (container.indexOf('container') > -1) {\n        Object.keys(this.refs[container].refs).forEach(_notification => {\n          var uid = notification.uid ? notification.uid : notification;\n\n          if (_notification === 'notification-' + uid) {\n            // NOTE: Stop iterating further and return the found notification.\n            // Since UIDs are uniques and there won't be another notification found.\n            foundNotification = this.refs[container].refs[_notification];\n          }\n        });\n      }\n    });\n    return foundNotification;\n  }\n\n  removeNotification(notification) {\n    var foundNotification = this.getNotificationRef(notification);\n    return foundNotification && foundNotification._hideNotification();\n  }\n\n  editNotification(notification, newNotification) {\n    var foundNotification = null; // NOTE: Find state notification to update by using\n    // `setState` and forcing React to re-render the component.\n\n    var uid = notification.uid ? notification.uid : notification;\n    var newNotifications = this.state.notifications.filter(function (stateNotification) {\n      if (uid === stateNotification.uid) {\n        foundNotification = stateNotification;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!foundNotification) {\n      return;\n    }\n\n    newNotifications.push(merge({}, foundNotification, newNotification));\n    this.setState({\n      notifications: newNotifications\n    });\n  }\n\n  clearNotifications() {\n    Object.keys(this.refs).forEach(container => {\n      if (container.indexOf('container') > -1) {\n        Object.keys(this.refs[container].refs).forEach(_notification => {\n          this.refs[container].refs[_notification]._hideNotification();\n        });\n      }\n    });\n  }\n\n  render() {\n    var containers = null;\n    var notifications = this.state.notifications;\n\n    if (notifications.length) {\n      containers = Object.keys(Constants.positions).map(position => {\n        var _notifications = notifications.filter(notification => {\n          return position === notification.position;\n        });\n\n        if (!_notifications.length) {\n          return null;\n        }\n\n        return React.createElement(NotificationContainer, {\n          ref: 'container-' + position,\n          key: position,\n          position: position,\n          notifications: _notifications,\n          getStyles: this._getStyles,\n          onRemove: this._didNotificationRemoved,\n          noAnimation: this.props.noAnimation,\n          allowHTML: this.props.allowHTML\n        });\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"notifications-wrapper\",\n      style: this.wrapper()\n    }, containers);\n  }\n\n}\n\nNotificationSystem.propTypes = {\n  style: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  noAnimation: PropTypes.bool,\n  allowHTML: PropTypes.bool\n};\nNotificationSystem.defaultProps = {\n  style: {},\n  noAnimation: false,\n  allowHTML: false\n};\nmodule.exports = NotificationSystem;","map":null,"metadata":{},"sourceType":"script"}