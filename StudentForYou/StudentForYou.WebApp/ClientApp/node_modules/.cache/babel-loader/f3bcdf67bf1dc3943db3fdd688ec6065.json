{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\nimport { bsClass, getClassSet, prefix, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  /**\n   * An html id attribute, necessary for accessibility\n   * @type {string|number}\n   * @required\n   */\n  id: isRequiredForA11y(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number])),\n\n  /**\n   * Sets the direction the Tooltip is positioned towards.\n   */\n  placement: React.PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /**\n   * The \"top\" position value for the Tooltip.\n   */\n  positionTop: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),\n\n  /**\n   * The \"left\" position value for the Tooltip.\n   */\n  positionLeft: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),\n\n  /**\n   * The \"top\" position value for the Tooltip arrow.\n   */\n  arrowOffsetTop: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),\n\n  /**\n   * The \"left\" position value for the Tooltip arrow.\n   */\n  arrowOffsetLeft: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string])\n};\nvar defaultProps = {\n  placement: 'right'\n};\n\nvar Tooltip = function (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  function Tooltip() {\n    _classCallCheck(this, Tooltip);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Tooltip.prototype.render = function render() {\n    var _extends2;\n\n    var _props = this.props;\n    var placement = _props.placement;\n    var positionTop = _props.positionTop;\n    var positionLeft = _props.positionLeft;\n    var arrowOffsetTop = _props.arrowOffsetTop;\n    var arrowOffsetLeft = _props.arrowOffsetLeft;\n    var className = _props.className;\n    var style = _props.style;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['placement', 'positionTop', 'positionLeft', 'arrowOffsetTop', 'arrowOffsetLeft', 'className', 'style', 'children']);\n\n    var _splitBsProps = splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n\n    var classes = _extends({}, getClassSet(bsProps), (_extends2 = {}, _extends2[placement] = true, _extends2));\n\n    var outerStyle = _extends({\n      top: positionTop,\n      left: positionLeft\n    }, style);\n\n    var arrowStyle = {\n      top: arrowOffsetTop,\n      left: arrowOffsetLeft\n    };\n    return React.createElement('div', _extends({}, elementProps, {\n      role: 'tooltip',\n      className: classNames(className, classes),\n      style: outerStyle\n    }), React.createElement('div', {\n      className: prefix(bsProps, 'arrow'),\n      style: arrowStyle\n    }), React.createElement('div', {\n      className: prefix(bsProps, 'inner')\n    }, children));\n  };\n\n  return Tooltip;\n}(React.Component);\n\nTooltip.propTypes = propTypes;\nTooltip.defaultProps = defaultProps;\nexport default bsClass('tooltip', Tooltip);","map":null,"metadata":{},"sourceType":"module"}